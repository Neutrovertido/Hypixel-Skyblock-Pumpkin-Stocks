# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# Proceeds to edit it anyways


from PyQt5 import QtCore, QtGui, QtWidgets
import asyncio

from PyQt5.QtWidgets import QMessageBox


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowModality(QtCore.Qt.NonModal)
        MainWindow.resize(700, 500)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(700, 500))
        MainWindow.setMaximumSize(QtCore.QSize(700, 500))
        font = QtGui.QFont()
        font.setFamily("Roboto")
        MainWindow.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/Main/img/PumpkinNew-1.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.UnitedStates))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.dataTable = QtWidgets.QTableWidget(self.centralwidget)
        self.dataTable.setGeometry(QtCore.QRect(10, 90, 681, 281))
        self.dataTable.setStyleSheet("")
        self.dataTable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustIgnored)
        self.dataTable.setObjectName("dataTable")
        self.dataTable.setColumnCount(3)
        self.dataTable.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.dataTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.dataTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.dataTable.setHorizontalHeaderItem(2, item)
        self.dataTable.horizontalHeader().setCascadingSectionResizes(True)
        self.dataTable.horizontalHeader().setStretchLastSection(False)
        self.dataTable.verticalHeader().setStretchLastSection(False)
        self.updateB = QtWidgets.QPushButton(self.centralwidget)
        self.updateB.setGeometry(QtCore.QRect(10, 380, 681, 61))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.updateB.setFont(font)
        self.updateB.setDefault(False)
        self.updateB.setFlat(False)
        self.updateB.setObjectName("updateB")
        self.title = QtWidgets.QLabel(self.centralwidget)
        self.title.setGeometry(QtCore.QRect(10, 10, 681, 71))
        self.title.setText("")
        self.title.setPixmap(QtGui.QPixmap(":/Main/img/Title.png"))
        self.title.setObjectName("title")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 700, 27))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuAbout = QtWidgets.QMenu(self.menubar)
        self.menuAbout.setObjectName("menuAbout")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionAPI_Key = QtWidgets.QAction(MainWindow)
        self.actionAPI_Key.setObjectName("actionAPI_Key")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.menuFile.addAction(self.actionAPI_Key)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuAbout.addAction(self.actionAbout)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # ------------------------------------ Manually Added ------------------------------------
        self.header = self.dataTable.horizontalHeader()
        self.header.setSectionResizeMode(0, QtWidgets.QHeaderView.Stretch)
        self.header.setSectionResizeMode(1, QtWidgets.QHeaderView.Stretch)
        self.header.setSectionResizeMode(2, QtWidgets.QHeaderView.Stretch)

        self.updateB.clicked.connect(self.update)

        self.actionAbout.triggered.connect(self.about)
        self.actionAPI_Key.triggered.connect(self.enterKey)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Pumpkin Tracker"))
        item = self.dataTable.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Item"))
        item = self.dataTable.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Price"))
        item = self.dataTable.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Ratio"))
        self.updateB.setText(_translate("MainWindow", "Update"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuAbout.setTitle(_translate("MainWindow", "Help"))
        self.actionAPI_Key.setText(_translate("MainWindow", "API Key"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionAbout.setText(_translate("MainWindow", "About"))

    def update(self):
        self.updateB.setText("Loading...")
        self.updateB.setEnabled(False)

        msg = QMessageBox()
        msg.setWindowTitle("Warning!")
        msg.setText(
            "The operation will take a while to complete!")
        msg.setIcon(QMessageBox.Warning)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/Main/img/PumpkinNew-1.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        msg.setWindowIcon(icon)
        msg.setStandardButtons(QMessageBox.Ok)
        xmsg = msg.exec_()

        try:
            Auction = asyncio.run(APIMethods.getAuctionData(API_Key))
            Bazaar = APIMethods.getBazaarData(API_Key)

            values = [Bazaar[0], Bazaar[1], Auction[0], Auction[1]]
            ratios = [values[0], values[1]/160, values[2]/256, values[3]/2816]

            self.dataTable.setRowCount(0)

            self.dataTable.insertRow(0)
            self.dataTable.insertRow(1)
            self.dataTable.insertRow(2)
            self.dataTable.insertRow(3)

            self.dataTable.setItem(0, 0, QtWidgets.QTableWidgetItem("Enchanted Pumpkin"))
            self.dataTable.setItem(1, 0, QtWidgets.QTableWidgetItem("Polished Pumpkin"))
            self.dataTable.setItem(2, 0, QtWidgets.QTableWidgetItem("Farmer Boots"))
            self.dataTable.setItem(3, 0, QtWidgets.QTableWidgetItem("Rancher Boots"))

            for i in range(0, 4):
                self.dataTable.setItem(i, 1, QtWidgets.QTableWidgetItem(str(values[i])))
                self.dataTable.setItem(i, 2, QtWidgets.QTableWidgetItem(str(ratios[i])))

            self.updateB.setText("Update")
        except:
            self.updateB.setText("Error")
            if len(API_Key) == 0:
                self.enterKey
        finally:
            self.updateB.setEnabled(True)

    def about(self):
        msg = QMessageBox()
        msg.setWindowTitle("About")
        msg.setText("Fetches the current sell prices of different goods that can be crafted with Enchanted Pumpkins.\nhttps://github.com/Neutrovertido/Hypixel-Skyblock-Pumpkin-Stocks\nâš–GPL-3.0")
        msg.setIcon(QMessageBox.Information)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/Main/img/PumpkinNew-1.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        msg.setWindowIcon(icon)
        msg.setStandardButtons(QMessageBox.Ok)
        xmsg = msg.exec_()

    def enterKey(self):
        key, ok = QtWidgets.QInputDialog.getText(MainWindow, 'API Key', 'Enter your API Key (/api):')
        if ok:
            API_Key = key


import Resources_rc
import APIMethods

API_Key = ""


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
